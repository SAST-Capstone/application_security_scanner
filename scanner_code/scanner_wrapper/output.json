{"errors": [], "paths": {"_comment": "<add --verbose for a list of skipped paths>", "scanned": ["/root/scanner/vulpy/.gitignore", "/root/scanner/vulpy/LICENSE", "/root/scanner/vulpy/README.rst", "/root/scanner/vulpy/bad/.gitignore", "/root/scanner/vulpy/bad/api_list.py", "/root/scanner/vulpy/bad/api_post.py", "/root/scanner/vulpy/bad/brute.py", "/root/scanner/vulpy/bad/csp.txt", "/root/scanner/vulpy/bad/db.py", "/root/scanner/vulpy/bad/db_init.py", "/root/scanner/vulpy/bad/libapi.py", "/root/scanner/vulpy/bad/libmfa.py", "/root/scanner/vulpy/bad/libposts.py", "/root/scanner/vulpy/bad/libsession.py", "/root/scanner/vulpy/bad/libuser.py", "/root/scanner/vulpy/bad/mod_api.py", "/root/scanner/vulpy/bad/mod_csp.py", "/root/scanner/vulpy/bad/mod_hello.py", "/root/scanner/vulpy/bad/mod_mfa.py", "/root/scanner/vulpy/bad/mod_posts.py", "/root/scanner/vulpy/bad/mod_user.py", "/root/scanner/vulpy/bad/payloads/cookie.js", "/root/scanner/vulpy/bad/payloads/hello.html", "/root/scanner/vulpy/bad/payloads/keylogger.js", "/root/scanner/vulpy/bad/payloads/payload.js", "/root/scanner/vulpy/bad/static/background.png", "/root/scanner/vulpy/bad/static/background.xcf", "/root/scanner/vulpy/bad/static/font-awesome.min.css", "/root/scanner/vulpy/bad/static/w3.css", "/root/scanner/vulpy/bad/templates/csp.html", "/root/scanner/vulpy/bad/templates/footer.html", "/root/scanner/vulpy/bad/templates/head.html", "/root/scanner/vulpy/bad/templates/messages.html", "/root/scanner/vulpy/bad/templates/mfa.disable.html", "/root/scanner/vulpy/bad/templates/mfa.enable.html", "/root/scanner/vulpy/bad/templates/navbar.html", "/root/scanner/vulpy/bad/templates/posts.view.html", "/root/scanner/vulpy/bad/templates/user.chpasswd.html", "/root/scanner/vulpy/bad/templates/user.create.html", "/root/scanner/vulpy/bad/templates/user.login.html", "/root/scanner/vulpy/bad/templates/user.login.mfa.html", "/root/scanner/vulpy/bad/templates/welcome.html", "/root/scanner/vulpy/bad/vulpy-ssl.py", "/root/scanner/vulpy/bad/vulpy.py", "/root/scanner/vulpy/good/.gitignore", "/root/scanner/vulpy/good/bad-passwords.txt", "/root/scanner/vulpy/good/csp.txt", "/root/scanner/vulpy/good/cutpasswd.py", "/root/scanner/vulpy/good/db_init.py", "/root/scanner/vulpy/good/httpbrute.py", "/root/scanner/vulpy/good/leaked_passwords.txt", "/root/scanner/vulpy/good/libapi.py", "/root/scanner/vulpy/good/libmfa.py", "/root/scanner/vulpy/good/libposts.py", "/root/scanner/vulpy/good/libsession.py", "/root/scanner/vulpy/good/libuser.py", "/root/scanner/vulpy/good/mod_api.py", "/root/scanner/vulpy/good/mod_csp.py", "/root/scanner/vulpy/good/mod_hello.py", "/root/scanner/vulpy/good/mod_mfa.py", "/root/scanner/vulpy/good/mod_posts.py", "/root/scanner/vulpy/good/mod_user.py", "/root/scanner/vulpy/good/mod_welcome1.py", "/root/scanner/vulpy/good/payloads/cookie.js", "/root/scanner/vulpy/good/payloads/hello.html", "/root/scanner/vulpy/good/payloads/keylogger.js", "/root/scanner/vulpy/good/payloads/payload.js", "/root/scanner/vulpy/good/static/background.png", "/root/scanner/vulpy/good/static/background.xcf", "/root/scanner/vulpy/good/static/font-awesome.min.css", "/root/scanner/vulpy/good/static/w3.css", "/root/scanner/vulpy/good/templates/csp.html", "/root/scanner/vulpy/good/templates/footer.html", "/root/scanner/vulpy/good/templates/head.html", "/root/scanner/vulpy/good/templates/messages.html", "/root/scanner/vulpy/good/templates/mfa.disable.html", "/root/scanner/vulpy/good/templates/mfa.enable.html", "/root/scanner/vulpy/good/templates/navbar.html", "/root/scanner/vulpy/good/templates/posts.view.html", "/root/scanner/vulpy/good/templates/user.chpasswd.html", "/root/scanner/vulpy/good/templates/user.create.html", "/root/scanner/vulpy/good/templates/user.login.html", "/root/scanner/vulpy/good/templates/user.login.mfa.html", "/root/scanner/vulpy/good/templates/welcome.html", "/root/scanner/vulpy/good/vulpy-ssl.py", "/root/scanner/vulpy/good/vulpy.py", "/root/scanner/vulpy/install-on-kali.sh", "/root/scanner/vulpy/owasp-asvs-4.0.csv", "/root/scanner/vulpy/requirements.txt", "/root/scanner/vulpy/utils/aes-decrypt.py", "/root/scanner/vulpy/utils/aes-encrypt.py", "/root/scanner/vulpy/utils/ca-create.py", "/root/scanner/vulpy/utils/ca-csr-create.py", "/root/scanner/vulpy/utils/ca-csr-load.py", "/root/scanner/vulpy/utils/crack-cvv.py", "/root/scanner/vulpy/utils/crack-hash.py", "/root/scanner/vulpy/utils/fernet-generate-key.py", "/root/scanner/vulpy/utils/generate_bad_passwords.py", "/root/scanner/vulpy/utils/hashfile.py", "/root/scanner/vulpy/utils/hmac_generate.py", "/root/scanner/vulpy/utils/httpbrute.py", "/root/scanner/vulpy/utils/luncheck.py", "/root/scanner/vulpy/utils/passwords.txt", "/root/scanner/vulpy/utils/rsa-decrypt.py", "/root/scanner/vulpy/utils/rsa-encrypt.py", "/root/scanner/vulpy/utils/rsa-keygen.py", "/root/scanner/vulpy/utils/rsa-sign.py", "/root/scanner/vulpy/utils/rsa-verify.py", "/root/scanner/vulpy/utils/scrypt-crack.py", "/root/scanner/vulpy/utils/scrypt-generate.py", "/root/scanner/vulpy/utils/scrypt-verify.py", "/root/scanner/vulpy/utils/skey.py"]}, "results": [{"check_id": "root.scanner.scanner_code.scanner_rules.flask.security.xss.audit.template-unescaped-with-safe", "end": {"col": 32, "line": 8, "offset": 371}, "extra": {"engine_kind": "OSS", "fingerprint": "d79c2b9fa151731da0e7156056c2124b8192a030f7152aa5cc92a10b413aa7652f8b189a6edced4236da7070de90755a20abc8f2b7e0317e70a29bbf9df59a45_0", "is_ignored": false, "lines": "        <p>{{ message | safe }}</p>", "message": "Detected a segment of a Flask template where autoescaping is explicitly disabled with '| safe' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "LOW", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"], "subcategory": ["audit"], "technology": ["flask"]}, "metavars": {"$1": {"abstract_content": " }}", "end": {"col": 32, "line": 8, "offset": 371}, "start": {"col": 29, "line": 8, "offset": 368}}}, "severity": "WARNING"}, "path": "/root/scanner/vulpy/bad/templates/messages.html", "start": {"col": 12, "line": 8, "offset": 351}}, {"check_id": "root.scanner.scanner_code.scanner_rules.flask.security.xss.audit.template-unescaped-with-safe", "end": {"col": 57, "line": 23, "offset": 801}, "extra": {"engine_kind": "OSS", "fingerprint": "369bc98971cd93b2d3217aabc2b185092b70b928dc84e5652068692b4856fe858a41e7156a9a3364bdca61eb284b96d058becd1b06e4f48c5ec934feddc2cbc9_0", "is_ignored": false, "lines": "          <li><span class=\"w3-h3\">{{ post.text | safe }}</span></li>", "message": "Detected a segment of a Flask template where autoescaping is explicitly disabled with '| safe' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "LOW", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"], "subcategory": ["audit"], "technology": ["flask"]}, "metavars": {"$1": {"abstract_content": " }}", "end": {"col": 57, "line": 23, "offset": 801}, "start": {"col": 54, "line": 23, "offset": 798}}}, "severity": "WARNING"}, "path": "/root/scanner/vulpy/bad/templates/posts.view.html", "start": {"col": 35, "line": 23, "offset": 779}}, {"check_id": "root.scanner.scanner_code.scanner_rules.flask.security.xss.audit.template-unescaped-with-safe", "end": {"col": 32, "line": 8, "offset": 371}, "extra": {"engine_kind": "OSS", "fingerprint": "92cb076c63392b32c7078e4386955eabd1a2580c964bae38dee7b51b66feebdb9456262cc28af451baf567ae6d2bcfbddfdf426aaabaa8456c84286120e2b1ee_0", "is_ignored": false, "lines": "        <p>{{ message | safe }}</p>", "message": "Detected a segment of a Flask template where autoescaping is explicitly disabled with '| safe' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "LOW", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"], "subcategory": ["audit"], "technology": ["flask"]}, "metavars": {"$1": {"abstract_content": " }}", "end": {"col": 32, "line": 8, "offset": 371}, "start": {"col": 29, "line": 8, "offset": 368}}}, "severity": "WARNING"}, "path": "/root/scanner/vulpy/good/templates/messages.html", "start": {"col": 12, "line": 8, "offset": 351}}, {"check_id": "root.scanner.scanner_code.scanner_rules.flask.security.xss.audit.template-unescaped-with-safe", "end": {"col": 57, "line": 23, "offset": 801}, "extra": {"engine_kind": "OSS", "fingerprint": "067cd00308d56ccd9a4abffbe6123d15519370dc352916a7519914f15ed978ffa98d4fed5e3b9b88d90e3911a9aad12c6dadc62a56557972092ba8e1799ac595_0", "is_ignored": false, "lines": "          <li><span class=\"w3-h3\">{{ post.text | safe }}</span></li>", "message": "Detected a segment of a Flask template where autoescaping is explicitly disabled with '| safe' filter. This allows rendering of raw HTML in this segment. Ensure no user data is rendered here, otherwise this is a cross-site scripting (XSS) vulnerability.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "LOW", "owasp": ["A07:2017 - Cross-Site Scripting (XSS)", "A03:2021 - Injection"], "references": ["https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss"], "subcategory": ["audit"], "technology": ["flask"]}, "metavars": {"$1": {"abstract_content": " }}", "end": {"col": 57, "line": 23, "offset": 801}, "start": {"col": 54, "line": 23, "offset": 798}}}, "severity": "WARNING"}, "path": "/root/scanner/vulpy/good/templates/posts.view.html", "start": {"col": 35, "line": 23, "offset": 779}}, {"check_id": "root.scanner.scanner_code.scanner_rules.flask.security.audit.avoid_using_app_run_directly", "end": {"col": 87, "line": 29, "offset": 720}, "extra": {"engine_kind": "OSS", "fingerprint": "b12379702b4f1fae6206cd0156661bd8745792c72a1844f414d948fed42548ae46957615353e97765491e8d419ca7fb8afee6e09533b9023e8eab5ccca331400_0", "is_ignored": false, "lines": "app.run(debug=True, host='127.0.1.1', ssl_context=('/tmp/acme.cert', '/tmp/acme.key'))", "message": "top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-668: Exposure of Resource to Wrong Sphere"], "impact": "MEDIUM", "likelihood": "LOW", "owasp": ["A01:2021 - Broken Access Control"], "references": ["https://owasp.org/Top10/A01_2021-Broken_Access_Control"], "subcategory": ["vuln"], "technology": ["flask"]}, "metavars": {}, "severity": "WARNING"}, "path": "/root/scanner/vulpy/bad/vulpy-ssl.py", "start": {"col": 1, "line": 29, "offset": 634}}, {"check_id": "root.scanner.scanner_code.scanner_rules.flask.security.audit.avoid_using_app_run_directly", "end": {"col": 72, "line": 55, "offset": 1341}, "extra": {"engine_kind": "OSS", "fingerprint": "b29acce789a73f371493ca7a9a767934e8ff39c022284e5e6e37263c86f520e00c9e28dd9fb0679cc85789c8a5f188a37cc7d45b184a073a36e616259c26cf5d_0", "is_ignored": false, "lines": "app.run(debug=True, host='127.0.1.1', port=5000, extra_files='csp.txt')", "message": "top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-668: Exposure of Resource to Wrong Sphere"], "impact": "MEDIUM", "likelihood": "LOW", "owasp": ["A01:2021 - Broken Access Control"], "references": ["https://owasp.org/Top10/A01_2021-Broken_Access_Control"], "subcategory": ["vuln"], "technology": ["flask"]}, "metavars": {}, "severity": "WARNING"}, "path": "/root/scanner/vulpy/bad/vulpy.py", "start": {"col": 1, "line": 55, "offset": 1270}}, {"check_id": "root.scanner.scanner_code.scanner_rules.flask.security.audit.avoid_using_app_run_directly", "end": {"col": 87, "line": 29, "offset": 720}, "extra": {"engine_kind": "OSS", "fingerprint": "eee21cc1eff0587fc84415a0de2dafa9c1bf793f9d69d5e5e06f765b5133a2da640a2491986485efc14302b428f2e274714171584d7158700d0c7233f8ce3d35_0", "is_ignored": false, "lines": "app.run(debug=True, host='127.0.1.1', ssl_context=('/tmp/acme.cert', '/tmp/acme.key'))", "message": "top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-668: Exposure of Resource to Wrong Sphere"], "impact": "MEDIUM", "likelihood": "LOW", "owasp": ["A01:2021 - Broken Access Control"], "references": ["https://owasp.org/Top10/A01_2021-Broken_Access_Control"], "subcategory": ["vuln"], "technology": ["flask"]}, "metavars": {}, "severity": "WARNING"}, "path": "/root/scanner/vulpy/good/vulpy-ssl.py", "start": {"col": 1, "line": 29, "offset": 634}}, {"check_id": "root.scanner.scanner_code.scanner_rules.flask.security.audit.avoid_using_app_run_directly", "end": {"col": 72, "line": 53, "offset": 1393}, "extra": {"engine_kind": "OSS", "fingerprint": "9cfe440d07d34a5e4ebf524d779af1c7b8684d0abebb56cce0122a372c942eedc8402a23fc664687591748531781172579ce626ae216299bc1d4c5fa8c85902a_0", "is_ignored": false, "lines": "app.run(debug=True, host='127.0.1.1', port=5001, extra_files='csp.txt')", "message": "top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like inside a function", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-668: Exposure of Resource to Wrong Sphere"], "impact": "MEDIUM", "likelihood": "LOW", "owasp": ["A01:2021 - Broken Access Control"], "references": ["https://owasp.org/Top10/A01_2021-Broken_Access_Control"], "subcategory": ["vuln"], "technology": ["flask"]}, "metavars": {}, "severity": "WARNING"}, "path": "/root/scanner/vulpy/good/vulpy.py", "start": {"col": 1, "line": 53, "offset": 1322}}, {"check_id": "root.scanner.scanner_code.scanner_rules.flask.security.audit.avoid_hardcoded_config_SECRET_KEY", "end": {"col": 37, "line": 13, "offset": 270}, "extra": {"engine_kind": "OSS", "fingerprint": "1279dbc45957df33cb579d4eaca6e17eca3ba1231a44433786199ed3341cc3ed609721255c32149b98c00484fe233a3e600bf61294b814c2c4a311ae63222ae7_0", "is_ignored": false, "lines": "app.config['SECRET_KEY'] = 'aaaaaaa'", "message": "Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-489: Active Debug Code"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A05:2021 - Security Misconfiguration"], "references": ["https://bento.dev/checks/flask/avoid-hardcoded-config/", "https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#builtin-configuration-values", "https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#environment-and-debug-features"], "subcategory": ["audit"], "technology": ["flask"]}, "metavars": {"$M": {"abstract_content": "app", "end": {"col": 4, "line": 13, "offset": 237}, "propagated_value": {"svalue_abstract_content": "Flask('vulpy')", "svalue_end": {"col": 21, "line": 12, "offset": 233}, "svalue_start": {"col": 7, "line": 12, "offset": 219}}, "start": {"col": 1, "line": 13, "offset": 234}}}, "severity": "ERROR"}, "path": "/root/scanner/vulpy/bad/vulpy-ssl.py", "start": {"col": 1, "line": 13, "offset": 234}}, {"check_id": "root.scanner.scanner_code.scanner_rules.flask.security.audit.avoid_hardcoded_config_SECRET_KEY", "end": {"col": 37, "line": 16, "offset": 351}, "extra": {"engine_kind": "OSS", "fingerprint": "fec207a6c2fb68aa9da026404a8b91ac627cfd3ad83f642f9985de90db63af49f542d39ae26cf648275e269dcf72f9c18363debd4f9eb7f15333e3a4ce6301e1_0", "is_ignored": false, "lines": "app.config['SECRET_KEY'] = 'aaaaaaa'", "message": "Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-489: Active Debug Code"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A05:2021 - Security Misconfiguration"], "references": ["https://bento.dev/checks/flask/avoid-hardcoded-config/", "https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#builtin-configuration-values", "https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#environment-and-debug-features"], "subcategory": ["audit"], "technology": ["flask"]}, "metavars": {"$M": {"abstract_content": "app", "end": {"col": 4, "line": 16, "offset": 318}, "propagated_value": {"svalue_abstract_content": "Flask('vulpy')", "svalue_end": {"col": 21, "line": 15, "offset": 314}, "svalue_start": {"col": 7, "line": 15, "offset": 300}}, "start": {"col": 1, "line": 16, "offset": 315}}}, "severity": "ERROR"}, "path": "/root/scanner/vulpy/bad/vulpy.py", "start": {"col": 1, "line": 16, "offset": 315}}, {"check_id": "root.scanner.scanner_code.scanner_rules.flask.security.audit.avoid_hardcoded_config_SECRET_KEY", "end": {"col": 37, "line": 13, "offset": 270}, "extra": {"engine_kind": "OSS", "fingerprint": "100f0af7b1a3e8c56cdd885a94dc43531cb26e24bfcc87e17f3163d19e1288eda700cfbefdfc727ce3b15b48da2860a28121a2eb49bf240463b6b127366f580a_0", "is_ignored": false, "lines": "app.config['SECRET_KEY'] = 'aaaaaaa'", "message": "Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-489: Active Debug Code"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A05:2021 - Security Misconfiguration"], "references": ["https://bento.dev/checks/flask/avoid-hardcoded-config/", "https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#builtin-configuration-values", "https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#environment-and-debug-features"], "subcategory": ["audit"], "technology": ["flask"]}, "metavars": {"$M": {"abstract_content": "app", "end": {"col": 4, "line": 13, "offset": 237}, "propagated_value": {"svalue_abstract_content": "Flask('vulpy')", "svalue_end": {"col": 21, "line": 12, "offset": 233}, "svalue_start": {"col": 7, "line": 12, "offset": 219}}, "start": {"col": 1, "line": 13, "offset": 234}}}, "severity": "ERROR"}, "path": "/root/scanner/vulpy/good/vulpy-ssl.py", "start": {"col": 1, "line": 13, "offset": 234}}, {"check_id": "root.scanner.scanner_code.scanner_rules.flask.security.audit.avoid_hardcoded_config_SECRET_KEY", "end": {"col": 94, "line": 17, "offset": 409}, "extra": {"engine_kind": "OSS", "fingerprint": "99d29369245930b4c9668069d2056732862f1f630b4f5701ea7cc57e4ba4c83c4f70ae56edc4cbf5ecb4e2f9bdeb9c8e829f38ecd2d6b40671241de3d13d805c_0", "is_ignored": false, "lines": "app.config['SECRET_KEY'] = '123aa8a93bdde342c871564a62282af857bda14b3359fde95d0c5e4b321610c1'", "message": "Hardcoded variable `SECRET_KEY` detected. Use environment variables or config files instead", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-489: Active Debug Code"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A05:2021 - Security Misconfiguration"], "references": ["https://bento.dev/checks/flask/avoid-hardcoded-config/", "https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#builtin-configuration-values", "https://flask.palletsprojects.com/en/1.1.x/config/?highlight=configuration#environment-and-debug-features"], "subcategory": ["audit"], "technology": ["flask"]}, "metavars": {"$M": {"abstract_content": "app", "end": {"col": 4, "line": 17, "offset": 319}, "propagated_value": {"svalue_abstract_content": "Flask('vulpy')", "svalue_end": {"col": 21, "line": 16, "offset": 315}, "svalue_start": {"col": 7, "line": 16, "offset": 301}}, "start": {"col": 1, "line": 17, "offset": 316}}}, "severity": "ERROR"}, "path": "/root/scanner/vulpy/good/vulpy.py", "start": {"col": 1, "line": 17, "offset": 316}}, {"check_id": "root.scanner.scanner_code.scanner_rules.flask.security.audit.debug-enabled", "end": {"col": 87, "line": 29, "offset": 720}, "extra": {"engine_kind": "OSS", "fingerprint": "a938f9c9819ab9b3c0d9884170f2270cf5cbb035b86e7e0125b7668e67349cd41bfa29c1469dcf5f3858acee5b222e39332c020df9f5e2f7e139df1a33fe9ee6_0", "is_ignored": false, "lines": "app.run(debug=True, host='127.0.1.1', ssl_context=('/tmp/acme.cert', '/tmp/acme.key'))", "message": "Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-489: Active Debug Code"], "impact": "MEDIUM", "likelihood": "HIGH", "owasp": "A06:2017 - Security Misconfiguration", "references": ["https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"], "subcategory": ["vuln"], "technology": ["flask"]}, "metavars": {"$APP": {"abstract_content": "app", "end": {"col": 4, "line": 29, "offset": 637}, "propagated_value": {"svalue_abstract_content": "Flask('vulpy')", "svalue_end": {"col": 21, "line": 12, "offset": 233}, "svalue_start": {"col": 7, "line": 12, "offset": 219}}, "start": {"col": 1, "line": 29, "offset": 634}}}, "severity": "WARNING"}, "path": "/root/scanner/vulpy/bad/vulpy-ssl.py", "start": {"col": 1, "line": 29, "offset": 634}}, {"check_id": "root.scanner.scanner_code.scanner_rules.flask.security.audit.debug-enabled", "end": {"col": 72, "line": 55, "offset": 1341}, "extra": {"engine_kind": "OSS", "fingerprint": "48af4a3eb5a9eb52a833ec0ad3d71257578c7c27a55328786f40feecda991f7b156fc610551052bc49e61acf3f62e402e05e0ce3afc95606be76a46fe1199327_0", "is_ignored": false, "lines": "app.run(debug=True, host='127.0.1.1', port=5000, extra_files='csp.txt')", "message": "Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-489: Active Debug Code"], "impact": "MEDIUM", "likelihood": "HIGH", "owasp": "A06:2017 - Security Misconfiguration", "references": ["https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"], "subcategory": ["vuln"], "technology": ["flask"]}, "metavars": {"$APP": {"abstract_content": "app", "end": {"col": 4, "line": 55, "offset": 1273}, "propagated_value": {"svalue_abstract_content": "Flask('vulpy')", "svalue_end": {"col": 21, "line": 15, "offset": 314}, "svalue_start": {"col": 7, "line": 15, "offset": 300}}, "start": {"col": 1, "line": 55, "offset": 1270}}}, "severity": "WARNING"}, "path": "/root/scanner/vulpy/bad/vulpy.py", "start": {"col": 1, "line": 55, "offset": 1270}}, {"check_id": "root.scanner.scanner_code.scanner_rules.flask.security.audit.debug-enabled", "end": {"col": 87, "line": 29, "offset": 720}, "extra": {"engine_kind": "OSS", "fingerprint": "b4137edb1a633892fc34ec97e1d27852ec3d190c1f48771c2146959e074a2d04a12e53c21e00eee0abac6f86153a950d109c76c6ba727e1993306d0b71482cb1_0", "is_ignored": false, "lines": "app.run(debug=True, host='127.0.1.1', ssl_context=('/tmp/acme.cert', '/tmp/acme.key'))", "message": "Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-489: Active Debug Code"], "impact": "MEDIUM", "likelihood": "HIGH", "owasp": "A06:2017 - Security Misconfiguration", "references": ["https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"], "subcategory": ["vuln"], "technology": ["flask"]}, "metavars": {"$APP": {"abstract_content": "app", "end": {"col": 4, "line": 29, "offset": 637}, "propagated_value": {"svalue_abstract_content": "Flask('vulpy')", "svalue_end": {"col": 21, "line": 12, "offset": 233}, "svalue_start": {"col": 7, "line": 12, "offset": 219}}, "start": {"col": 1, "line": 29, "offset": 634}}}, "severity": "WARNING"}, "path": "/root/scanner/vulpy/good/vulpy-ssl.py", "start": {"col": 1, "line": 29, "offset": 634}}, {"check_id": "root.scanner.scanner_code.scanner_rules.flask.security.audit.debug-enabled", "end": {"col": 72, "line": 53, "offset": 1393}, "extra": {"engine_kind": "OSS", "fingerprint": "481b2ec3858b7b67949658f83e6234209e3406d35533fadee814544ab24927b457051e8a87c3e0382bc5440e703f79dee9b1abd6a47fd358d0d4f48cc562273f_0", "is_ignored": false, "lines": "app.run(debug=True, host='127.0.1.1', port=5001, extra_files='csp.txt')", "message": "Detected Flask app with debug=True. Do not deploy to production with this flag enabled as it will leak sensitive information. Instead, consider using Flask configuration variables or setting 'debug' using system environment variables.", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-489: Active Debug Code"], "impact": "MEDIUM", "likelihood": "HIGH", "owasp": "A06:2017 - Security Misconfiguration", "references": ["https://labs.detectify.com/2015/10/02/how-patreon-got-hacked-publicly-exposed-werkzeug-debugger/"], "subcategory": ["vuln"], "technology": ["flask"]}, "metavars": {"$APP": {"abstract_content": "app", "end": {"col": 4, "line": 53, "offset": 1325}, "propagated_value": {"svalue_abstract_content": "Flask('vulpy')", "svalue_end": {"col": 21, "line": 16, "offset": 315}, "svalue_start": {"col": 7, "line": 16, "offset": 301}}, "start": {"col": 1, "line": 53, "offset": 1322}}}, "severity": "WARNING"}, "path": "/root/scanner/vulpy/good/vulpy.py", "start": {"col": 1, "line": 53, "offset": 1322}}, {"check_id": "root.scanner.scanner_code.scanner_rules.jwt.security.jwt-python-hardcoded-secret", "end": {"col": 18, "line": 24, "offset": 448}, "extra": {"engine_kind": "OSS", "fingerprint": "d86d4f8b1922c13ff2859259559461fd5c957fdad1913832323c5dba5a629cbce5cdc152c278c24961395050353eb3f097f69eeb8ad2b14ecd28c6e37f5aace7_0", "is_ignored": false, "lines": "        }, secret, algorithm='HS256').decode()", "message": "Hardcoded JWT secret or private key is used. This is a Insufficiently Protected Credentials weakness: https://cwe.mitre.org/data/definitions/522.html Consider using an appropriate security mechanism to protect the credentials (e.g. keeping secrets in environment variables)", "metadata": {"category": "security", "confidence": "HIGH", "cwe": ["CWE-522: Insufficiently Protected Credentials"], "cwe2021-top25": true, "impact": "MEDIUM", "likelihood": "HIGH", "owasp": ["A02:2017 - Broken Authentication", "A04:2021 - Insecure Design"], "references": ["https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/"], "subcategory": ["vuln"], "technology": ["jwt"]}, "metavars": {"$SECRET": {"abstract_content": "secret", "end": {"col": 18, "line": 24, "offset": 448}, "propagated_value": {"svalue_abstract_content": "'MYSUPERSECRETKEY'", "svalue_end": {"col": 28, "line": 10, "offset": 141}, "svalue_start": {"col": 10, "line": 10, "offset": 123}}, "start": {"col": 12, "line": 24, "offset": 442}}, "$X": {"abstract_content": "{'username'username'nbf'now'exp'now+not_after}", "end": {"col": 10, "line": 24, "offset": 440}, "start": {"col": 24, "line": 20, "offset": 348}}}, "severity": "ERROR"}, "path": "/root/scanner/vulpy/good/libapi.py", "start": {"col": 12, "line": 24, "offset": 442}}, {"check_id": "root.scanner.scanner_code.scanner_rules.lang.security.audit.formatted-sql-query", "end": {"col": 103, "line": 19, "offset": 549}, "extra": {"engine_kind": "OSS", "fingerprint": "f539afd0427705f2f81d181b59644572fe1e34b0b5d6c6d8a12b871048650d222a5ed771761a0ae75926a62fcdccbd12f992c4746403d452047c72b7b31ac260_0", "is_ignored": false, "lines": "        c.execute(\"INSERT INTO users (user, password, failures) VALUES ('%s', '%s', '%d')\" %(u, p, 0))", "message": "Detected possible formatted SQL query. Use parameterized queries instead.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://stackoverflow.com/questions/775296/mysql-parameterized-queries"], "subcategory": ["audit"], "technology": ["python"]}, "metavars": {"$DB": {"abstract_content": "c", "end": {"col": 10, "line": 19, "offset": 456}, "start": {"col": 9, "line": 19, "offset": 455}}}, "severity": "WARNING"}, "path": "/root/scanner/vulpy/bad/db.py", "start": {"col": 9, "line": 19, "offset": 455}}, {"check_id": "root.scanner.scanner_code.scanner_rules.lang.security.audit.formatted-sql-query", "end": {"col": 151, "line": 20, "offset": 545}, "extra": {"engine_kind": "OSS", "fingerprint": "34a730f56d98eaf730a5fb96efe7b86d9f6ca1c509b30fb17cd49242a49c70d4de7ac8b091b63c4668d2917c45fb37f25f94c6e5f6308742d65c70cfcee896a5_0", "is_ignored": false, "lines": "        c.execute(\"INSERT INTO users (username, password, failures, mfa_enabled, mfa_secret) VALUES ('%s', '%s', '%d', '%d', '%s')\" %(u, p, 0, 0, ''))", "message": "Detected possible formatted SQL query. Use parameterized queries instead.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://stackoverflow.com/questions/775296/mysql-parameterized-queries"], "subcategory": ["audit"], "technology": ["python"]}, "metavars": {"$DB": {"abstract_content": "c", "end": {"col": 10, "line": 20, "offset": 404}, "start": {"col": 9, "line": 20, "offset": 403}}}, "severity": "WARNING"}, "path": "/root/scanner/vulpy/bad/db_init.py", "start": {"col": 9, "line": 20, "offset": 403}}, {"check_id": "root.scanner.scanner_code.scanner_rules.lang.security.audit.formatted-sql-query", "end": {"col": 113, "line": 12, "offset": 315}, "extra": {"engine_kind": "OSS", "fingerprint": "4b819c013dc8abc4fbc16af5033cdbfa70bfab738748c6226f3b17f9ceae8aaa28e3cfbd829ed2870e334aa4ea80cf9fa5d8bc9b850e7fd95399c9a55d2365d6_0", "is_ignored": false, "lines": "    user = c.execute(\"SELECT * FROM users WHERE username = '{}' and password = '{}'\".format(username, password)).fetchone()", "message": "Detected possible formatted SQL query. Use parameterized queries instead.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://stackoverflow.com/questions/775296/mysql-parameterized-queries"], "subcategory": ["audit"], "technology": ["python"]}, "metavars": {"$DB": {"abstract_content": "c", "end": {"col": 13, "line": 12, "offset": 215}, "propagated_value": {"svalue_abstract_content": "conn.cursor()", "svalue_end": {"col": 22, "line": 10, "offset": 201}, "svalue_start": {"col": 9, "line": 10, "offset": 188}}, "start": {"col": 12, "line": 12, "offset": 214}}}, "severity": "WARNING"}, "path": "/root/scanner/vulpy/bad/libuser.py", "start": {"col": 12, "line": 12, "offset": 214}}, {"check_id": "root.scanner.scanner_code.scanner_rules.lang.security.audit.formatted-sql-query", "end": {"col": 161, "line": 25, "offset": 668}, "extra": {"engine_kind": "OSS", "fingerprint": "4b819c013dc8abc4fbc16af5033cdbfa70bfab738748c6226f3b17f9ceae8aaa28e3cfbd829ed2870e334aa4ea80cf9fa5d8bc9b850e7fd95399c9a55d2365d6_1", "is_ignored": false, "lines": "    c.execute(\"INSERT INTO users (username, password, failures, mfa_enabled, mfa_secret) VALUES ('%s', '%s', '%d', '%d', '%s')\" %(username, password, 0, 0, ''))", "message": "Detected possible formatted SQL query. Use parameterized queries instead.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://stackoverflow.com/questions/775296/mysql-parameterized-queries"], "subcategory": ["audit"], "technology": ["python"]}, "metavars": {"$DB": {"abstract_content": "c", "end": {"col": 6, "line": 25, "offset": 513}, "propagated_value": {"svalue_abstract_content": "conn.cursor()", "svalue_end": {"col": 22, "line": 23, "offset": 506}, "svalue_start": {"col": 9, "line": 23, "offset": 493}}, "start": {"col": 5, "line": 25, "offset": 512}}}, "severity": "WARNING"}, "path": "/root/scanner/vulpy/bad/libuser.py", "start": {"col": 5, "line": 25, "offset": 512}}, {"check_id": "root.scanner.scanner_code.scanner_rules.lang.security.audit.formatted-sql-query", "end": {"col": 99, "line": 53, "offset": 1301}, "extra": {"engine_kind": "OSS", "fingerprint": "4b819c013dc8abc4fbc16af5033cdbfa70bfab738748c6226f3b17f9ceae8aaa28e3cfbd829ed2870e334aa4ea80cf9fa5d8bc9b850e7fd95399c9a55d2365d6_2", "is_ignored": false, "lines": "    c.execute(\"UPDATE users SET password = '{}' WHERE username = '{}'\".format(password, username))", "message": "Detected possible formatted SQL query. Use parameterized queries instead.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://stackoverflow.com/questions/775296/mysql-parameterized-queries"], "subcategory": ["audit"], "technology": ["python"]}, "metavars": {"$DB": {"abstract_content": "c", "end": {"col": 6, "line": 53, "offset": 1208}, "propagated_value": {"svalue_abstract_content": "conn.cursor()", "svalue_end": {"col": 22, "line": 51, "offset": 1201}, "svalue_start": {"col": 9, "line": 51, "offset": 1188}}, "start": {"col": 5, "line": 53, "offset": 1207}}}, "severity": "WARNING"}, "path": "/root/scanner/vulpy/bad/libuser.py", "start": {"col": 5, "line": 53, "offset": 1207}}, {"check_id": "root.scanner.scanner_code.scanner_rules.lang.security.audit.formatted-sql-query", "end": {"col": 171, "line": 61, "offset": 1523}, "extra": {"engine_kind": "OSS", "fingerprint": "f7c33f15931d5455118107f7a2d0db5b6dd0f42374f6ce5108b3954f47c1809e3f66a3186bff4b4b896802af1d11966955179e96ee6e29983b0c7c7a6689ac7c_0", "is_ignored": false, "lines": "    c.execute(\"INSERT INTO users (username, password, salt, failures, mfa_enabled, mfa_secret) VALUES ('%s', '%s', '%s', '%d', '%d', '%s')\" %(username, '', '', 0, 0, ''))", "message": "Detected possible formatted SQL query. Use parameterized queries instead.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://stackoverflow.com/questions/775296/mysql-parameterized-queries"], "subcategory": ["audit"], "technology": ["python"]}, "metavars": {"$DB": {"abstract_content": "c", "end": {"col": 6, "line": 61, "offset": 1358}, "propagated_value": {"svalue_abstract_content": "conn.cursor()", "svalue_end": {"col": 22, "line": 60, "offset": 1352}, "svalue_start": {"col": 9, "line": 60, "offset": 1339}}, "start": {"col": 5, "line": 61, "offset": 1357}}}, "severity": "WARNING"}, "path": "/root/scanner/vulpy/good/libuser.py", "start": {"col": 5, "line": 61, "offset": 1357}}, {"check_id": "root.scanner.scanner_code.scanner_rules.lang.security.audit.dangerous-subprocess-use-audit", "end": {"col": 86, "line": 21, "offset": 331}, "extra": {"engine_kind": "OSS", "fingerprint": "e28c6d9387ac4a705e7758f9b10561b9e6067de2188aff7a0d895b49535546567b41010e8e6d8ed499b5aebca9425daefedc1fc88c6c505a0b63024d945639cc_0", "is_ignored": false, "lines": "    result = subprocess.run([program, username, password], stdout=subprocess.DEVNULL)", "message": "Detected subprocess function 'run' without a static string. If this data can be controlled by a malicious actor, it may be an instance of command injection. Audit the use of this call to ensure it is not controllable by an external resource. You may consider using 'shlex.escape()'.", "metadata": {"asvs": {"control_id": "5.3.8 OS Command Injection", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements", "section": "V5: Validation, Sanitization and Encoding Verification Requirements", "version": "4"}, "category": "security", "confidence": "LOW", "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess", "https://docs.python.org/3/library/subprocess.html", "https://docs.python.org/3/library/shlex.html", "https://semgrep.dev/docs/cheat-sheets/python-command-injection/"], "subcategory": ["audit"], "technology": ["python"]}, "metavars": {"$FUNC": {"abstract_content": "run", "end": {"col": 28, "line": 21, "offset": 273}, "start": {"col": 25, "line": 21, "offset": 270}}}, "severity": "ERROR"}, "path": "/root/scanner/vulpy/bad/brute.py", "start": {"col": 14, "line": 21, "offset": 259}}, {"check_id": "root.scanner.scanner_code.scanner_rules.lang.security.audit.dangerous-subprocess-use-tainted-env-args", "end": {"col": 58, "line": 21, "offset": 303}, "extra": {"dataflow_trace": {"intermediate_vars": [{"content": "username", "location": {"end": {"col": 9, "line": 7, "offset": 84}, "path": "/root/scanner/vulpy/bad/brute.py", "start": {"col": 1, "line": 7, "offset": 76}}}], "taint_sink": ["CliLoc", [{"end": {"col": 58, "line": 21, "offset": 303}, "path": "/root/scanner/vulpy/bad/brute.py", "start": {"col": 29, "line": 21, "offset": 274}}, "[program, username, password]"]], "taint_source": ["CliLoc", [{"end": {"col": 20, "line": 7, "offset": 95}, "path": "/root/scanner/vulpy/bad/brute.py", "start": {"col": 12, "line": 7, "offset": 87}}, "sys.argv"]]}, "engine_kind": "OSS", "fingerprint": "ed4d128c313a7965cfbe3597cc91e221187e97e2acb12a7a291c817803ba1855acae0fd0eeb3d836d86fee7ac3f81e25301c20843971138cd0e5489971425a9a_0", "is_ignored": false, "lines": "    result = subprocess.run([program, username, password], stdout=subprocess.DEVNULL)", "message": "Detected subprocess function 'run' with user controlled data. A malicious actor could leverage this to perform command injection. You may consider using 'shlex.escape()'.", "metadata": {"asvs": {"control_id": "5.3.8 OS Command Injection", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements", "section": "V5: Validation, Sanitization and Encoding Verification Requirements", "version": "4"}, "category": "security", "confidence": "MEDIUM", "cwe": ["CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "MEDIUM", "likelihood": "MEDIUM", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess", "https://docs.python.org/3/library/subprocess.html", "https://docs.python.org/3/library/shlex.html", "https://semgrep.dev/docs/cheat-sheets/python-command-injection/"], "subcategory": ["vuln"], "technology": ["python"]}, "metavars": {"$CMD": {"abstract_content": "[program username password]", "end": {"col": 58, "line": 21, "offset": 303}, "start": {"col": 29, "line": 21, "offset": 274}}, "$FUNC": {"abstract_content": "run", "end": {"col": 28, "line": 21, "offset": 273}, "start": {"col": 25, "line": 21, "offset": 270}}}, "severity": "ERROR"}, "path": "/root/scanner/vulpy/bad/brute.py", "start": {"col": 29, "line": 21, "offset": 274}}, {"check_id": "root.scanner.scanner_code.scanner_rules.lang.security.audit.insecure-transport.requests.request-with-http", "end": {"col": 74, "line": 10, "offset": 205}, "extra": {"dataflow_trace": {"taint_sink": ["CliLoc", [{"end": {"col": 74, "line": 10, "offset": 205}, "path": "/root/scanner/vulpy/bad/api_list.py", "start": {"col": 22, "line": 10, "offset": 153}}, "'http://127.0.1.1:5000/api/post/{}'.format(username)"]], "taint_source": ["CliLoc", [{"end": {"col": 57, "line": 10, "offset": 188}, "path": "/root/scanner/vulpy/bad/api_list.py", "start": {"col": 22, "line": 10, "offset": 153}}, "'http://127.0.1.1:5000/api/post/{}'"]]}, "engine_kind": "OSS", "fingerprint": "56df6f8c71b6ddfb837d2045881af4df6294989015144654d783d48977d7f3145d79ec929978ab21b4ffde0d2b4e0afb5b3d3446fa6c8f0e7ab983f25bb21901_0", "fix_regex": {"count": 1, "regex": "[Hh][Tt][Tt][Pp]://", "replacement": "https://"}, "is_ignored": false, "lines": "    r = requests.get('http://127.0.1.1:5000/api/post/{}'.format(username))", "message": "Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead.", "metadata": {"asvs": {"control_id": "9.1.1 Weak TLS", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x17-V9-Communications.md#v92-server-communications-security-requirements", "section": "V9 Communications Verification Requirements", "version": "4"}, "category": "security", "confidence": "MEDIUM", "cwe": ["CWE-319: Cleartext Transmission of Sensitive Information"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["audit"], "technology": ["requests"]}, "metavars": {"$SINK": {"abstract_content": "'http://127.0.1.1:5000/api/post/{}'.format(username)", "end": {"col": 74, "line": 10, "offset": 205}, "start": {"col": 22, "line": 10, "offset": 153}}, "$URL": {"abstract_content": "http://127.0.1.1:5000/api/post/{}", "end": {"col": 56, "line": 10, "offset": 187}, "start": {"col": 23, "line": 10, "offset": 154}}, "$W": {"abstract_content": "get", "end": {"col": 21, "line": 10, "offset": 152}, "start": {"col": 18, "line": 10, "offset": 149}}}, "severity": "INFO"}, "path": "/root/scanner/vulpy/bad/api_list.py", "start": {"col": 22, "line": 10, "offset": 153}}, {"check_id": "root.scanner.scanner_code.scanner_rules.lang.security.audit.insecure-transport.requests.request-with-http", "end": {"col": 58, "line": 16, "offset": 372}, "extra": {"dataflow_trace": {"taint_sink": ["CliLoc", [{"end": {"col": 58, "line": 16, "offset": 372}, "path": "/root/scanner/vulpy/bad/api_post.py", "start": {"col": 27, "line": 16, "offset": 341}}, "'http://127.0.1.1:5000/api/key'"]], "taint_source": ["CliLoc", [{"end": {"col": 58, "line": 16, "offset": 372}, "path": "/root/scanner/vulpy/bad/api_post.py", "start": {"col": 27, "line": 16, "offset": 341}}, "'http://127.0.1.1:5000/api/key'"]]}, "engine_kind": "OSS", "fingerprint": "dd791ec8b4012c9b981a8e5a482230a483e1de0f3313ad09dc560ef0a634dccb6899ea7ef0a993a46d7971b872aec2c081e47a62a9ad885222a769cb98d71649_0", "fix_regex": {"count": 1, "regex": "[Hh][Tt][Tt][Pp]://", "replacement": "https://"}, "is_ignored": false, "lines": "        r = requests.post('http://127.0.1.1:5000/api/key', json={'username':username, 'password':password})", "message": "Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead.", "metadata": {"asvs": {"control_id": "9.1.1 Weak TLS", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x17-V9-Communications.md#v92-server-communications-security-requirements", "section": "V9 Communications Verification Requirements", "version": "4"}, "category": "security", "confidence": "MEDIUM", "cwe": ["CWE-319: Cleartext Transmission of Sensitive Information"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["audit"], "technology": ["requests"]}, "metavars": {"$SINK": {"abstract_content": "'http://127.0.1.1:5000/api/key'", "end": {"col": 58, "line": 16, "offset": 372}, "start": {"col": 27, "line": 16, "offset": 341}}, "$URL": {"abstract_content": "http://127.0.1.1:5000/api/key", "end": {"col": 57, "line": 16, "offset": 371}, "start": {"col": 28, "line": 16, "offset": 342}}, "$W": {"abstract_content": "post", "end": {"col": 26, "line": 16, "offset": 340}, "start": {"col": 22, "line": 16, "offset": 336}}}, "severity": "INFO"}, "path": "/root/scanner/vulpy/bad/api_post.py", "start": {"col": 27, "line": 16, "offset": 341}}, {"check_id": "root.scanner.scanner_code.scanner_rules.lang.security.audit.insecure-transport.requests.request-with-http", "end": {"col": 55, "line": 30, "offset": 849}, "extra": {"dataflow_trace": {"taint_sink": ["CliLoc", [{"end": {"col": 55, "line": 30, "offset": 849}, "path": "/root/scanner/vulpy/bad/api_post.py", "start": {"col": 23, "line": 30, "offset": 817}}, "'http://127.0.1.1:5000/api/post'"]], "taint_source": ["CliLoc", [{"end": {"col": 55, "line": 30, "offset": 849}, "path": "/root/scanner/vulpy/bad/api_post.py", "start": {"col": 23, "line": 30, "offset": 817}}, "'http://127.0.1.1:5000/api/post'"]]}, "engine_kind": "OSS", "fingerprint": "f1cbaf8e1829a4f90735fbc23e65f5f9465aa6d17d8af1c9a4f12eb60d01552504b2aa6bc425a317446a46bc62ef0d6f90389becd7daa93b1804003d69da48bc_0", "fix_regex": {"count": 1, "regex": "[Hh][Tt][Tt][Pp]://", "replacement": "https://"}, "is_ignored": false, "lines": "    r = requests.post('http://127.0.1.1:5000/api/post', json={'text':message}, headers={'X-APIKEY': api_key})", "message": "Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead.", "metadata": {"asvs": {"control_id": "9.1.1 Weak TLS", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x17-V9-Communications.md#v92-server-communications-security-requirements", "section": "V9 Communications Verification Requirements", "version": "4"}, "category": "security", "confidence": "MEDIUM", "cwe": ["CWE-319: Cleartext Transmission of Sensitive Information"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["audit"], "technology": ["requests"]}, "metavars": {"$SINK": {"abstract_content": "'http://127.0.1.1:5000/api/post'", "end": {"col": 55, "line": 30, "offset": 849}, "start": {"col": 23, "line": 30, "offset": 817}}, "$URL": {"abstract_content": "http://127.0.1.1:5000/api/post", "end": {"col": 54, "line": 30, "offset": 848}, "start": {"col": 24, "line": 30, "offset": 818}}, "$W": {"abstract_content": "post", "end": {"col": 22, "line": 30, "offset": 816}, "start": {"col": 18, "line": 30, "offset": 812}}}, "severity": "INFO"}, "path": "/root/scanner/vulpy/bad/api_post.py", "start": {"col": 23, "line": 30, "offset": 817}}, {"check_id": "root.scanner.scanner_code.scanner_rules.lang.security.audit.insecure-transport.requests.request-with-http", "end": {"col": 33, "line": 22, "offset": 298}, "extra": {"dataflow_trace": {"taint_sink": ["CliLoc", [{"end": {"col": 33, "line": 22, "offset": 298}, "path": "/root/scanner/vulpy/good/httpbrute.py", "start": {"col": 30, "line": 22, "offset": 295}}, "URL"]], "taint_source": ["CliLoc", [{"end": {"col": 33, "line": 22, "offset": 298}, "path": "/root/scanner/vulpy/good/httpbrute.py", "start": {"col": 30, "line": 22, "offset": 295}}, "URL"]]}, "engine_kind": "OSS", "fingerprint": "047587b70d92f10fae94af4688e1280a2a4b6d0b1b53bf8a20fb40213b10f6b91602fc3bdf766ed0a57ced97fedddd347da45af18ae2cd40fa5b152fc04a89d4_0", "fix_regex": {"count": 1, "regex": "[Hh][Tt][Tt][Pp]://", "replacement": "https://"}, "is_ignored": false, "lines": "    response = requests.post(URL, data = {'username': username, 'password': password})", "message": "Detected a request using 'http://'. This request will be unencrypted, and attackers could listen into traffic on the network and be able to obtain sensitive information. Use 'https://' instead.", "metadata": {"asvs": {"control_id": "9.1.1 Weak TLS", "control_url": "https://github.com/OWASP/ASVS/blob/master/4.0/en/0x17-V9-Communications.md#v92-server-communications-security-requirements", "section": "V9 Communications Verification Requirements", "version": "4"}, "category": "security", "confidence": "MEDIUM", "cwe": ["CWE-319: Cleartext Transmission of Sensitive Information"], "impact": "LOW", "likelihood": "LOW", "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["audit"], "technology": ["requests"]}, "metavars": {"$SINK": {"abstract_content": "URL", "end": {"col": 33, "line": 22, "offset": 298}, "propagated_value": {"svalue_abstract_content": "'http://127.0.1.1:5000/user/login'", "svalue_end": {"col": 41, "line": 5, "offset": 81}, "svalue_start": {"col": 7, "line": 5, "offset": 47}}, "start": {"col": 30, "line": 22, "offset": 295}}, "$URL": {"abstract_content": "http://127.0.1.1:5000/user/login", "end": {"col": 40, "line": 5, "offset": 80}, "start": {"col": 8, "line": 5, "offset": 48}}, "$W": {"abstract_content": "post", "end": {"col": 29, "line": 22, "offset": 294}, "start": {"col": 25, "line": 22, "offset": 290}}}, "severity": "INFO"}, "path": "/root/scanner/vulpy/good/httpbrute.py", "start": {"col": 30, "line": 22, "offset": 295}}, {"check_id": "root.scanner.scanner_code.scanner_rules.lang.maintainability.code-after-unconditional-return", "end": {"col": 30, "line": 87, "offset": 2621}, "extra": {"engine_kind": "OSS", "fingerprint": "cca770b4e4d5ca2117ace4d91bcea749d4828c02267d1e63dc838789be1e6f059c68d1ad7103ca8113cd384f56bca154dbf6b84c8d6926aa93a71889eab48095_0", "is_ignored": false, "lines": "    return redirect('/')\n    flash(\"Password changed\")", "message": "code after return statement will not be executed", "metadata": {"category": "maintainability", "technology": ["python"]}, "metavars": {"$S": {"abstract_content": "flash(\"Password changed\")", "end": {"col": 30, "line": 87, "offset": 2621}, "start": {"col": 5, "line": 87, "offset": 2596}}}, "severity": "WARNING"}, "path": "/root/scanner/vulpy/good/mod_user.py", "start": {"col": 5, "line": 86, "offset": 2571}}, {"check_id": "root.scanner.scanner_code.scanner_rules.lang.best-practice.unspecified-open-encoding", "end": {"col": 43, "line": 3, "offset": 53}, "extra": {"engine_kind": "OSS", "fingerprint": "9d6abdeeb1aa79b8e5a89511c80f11ec53940a3157399c7970b55126a9e33d8de3dc8eab6dd00c50800e400199e7de84c4f1ff26dfc9f9f305003875c402b413_0", "is_ignored": false, "lines": "with open('/tmp/darkweb2017-top10000.txt') as f:", "message": "Missing 'encoding' parameter. 'open()' uses device locale encodings by default, corrupting files with special characters. Specify the encoding to ensure cross-platform support when opening files in text mode (e.g. encoding=\"utf-8\").", "metadata": {"category": "best-practice", "references": ["https://www.python.org/dev/peps/pep-0597/", "https://docs.python.org/3/library/functions.html#open"], "technology": ["python"]}, "metavars": {"$FILE": {"abstract_content": "'/tmp/darkweb2017-top10000.txt'", "end": {"col": 42, "line": 3, "offset": 52}, "start": {"col": 11, "line": 3, "offset": 21}}}, "severity": "WARNING"}, "path": "/root/scanner/vulpy/good/cutpasswd.py", "start": {"col": 6, "line": 3, "offset": 16}}, {"check_id": "root.scanner.scanner_code.scanner_rules.lang.best-practice.hardcoded-tmp-path", "end": {"col": 43, "line": 3, "offset": 53}, "extra": {"engine_kind": "OSS", "fingerprint": "565a7dd6aa559a385cd3c7a875728a6a02f4de1a64c70edba80a52f47412a15fee8e18d92cc365bc1331bf34f849fc0b87005733df337ad6ec8f2482ebd6db9f_0", "is_ignored": false, "lines": "with open('/tmp/darkweb2017-top10000.txt') as f:", "message": "Detected hardcoded temp directory. Consider using 'tempfile.TemporaryFile' instead.", "metadata": {"category": "best-practice", "references": ["https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryFile"], "technology": ["python"]}, "metavars": {}, "severity": "WARNING"}, "path": "/root/scanner/vulpy/good/cutpasswd.py", "start": {"col": 6, "line": 3, "offset": 16}}, {"check_id": "root.scanner.scanner_code.scanner_rules.lang.best-practice.hardcoded-tmp-path", "end": {"col": 31, "line": 31, "offset": 863}, "extra": {"engine_kind": "OSS", "fingerprint": "2ffd7dacf901d60db5c44ab55a024d7b16222da662d5eefee0e1ab3a8d0cde854f7fd368b21e3e810a51042163f18bc965abb232886cef094a62b893968b9d45_0", "is_ignored": false, "lines": "with open('/tmp/ca.key', 'wb') as out:", "message": "Detected hardcoded temp directory. Consider using 'tempfile.TemporaryFile' instead.", "metadata": {"category": "best-practice", "references": ["https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryFile"], "technology": ["python"]}, "metavars": {}, "severity": "WARNING"}, "path": "/root/scanner/vulpy/utils/ca-create.py", "start": {"col": 6, "line": 31, "offset": 838}}, {"check_id": "root.scanner.scanner_code.scanner_rules.lang.best-practice.hardcoded-tmp-path", "end": {"col": 31, "line": 34, "offset": 930}, "extra": {"engine_kind": "OSS", "fingerprint": "2ffd7dacf901d60db5c44ab55a024d7b16222da662d5eefee0e1ab3a8d0cde854f7fd368b21e3e810a51042163f18bc965abb232886cef094a62b893968b9d45_1", "is_ignored": false, "lines": "with open('/tmp/ca.pub', 'wb') as out:", "message": "Detected hardcoded temp directory. Consider using 'tempfile.TemporaryFile' instead.", "metadata": {"category": "best-practice", "references": ["https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryFile"], "technology": ["python"]}, "metavars": {}, "severity": "WARNING"}, "path": "/root/scanner/vulpy/utils/ca-create.py", "start": {"col": 6, "line": 34, "offset": 905}}, {"check_id": "root.scanner.scanner_code.scanner_rules.lang.best-practice.hardcoded-tmp-path", "end": {"col": 32, "line": 58, "offset": 1948}, "extra": {"engine_kind": "OSS", "fingerprint": "2ffd7dacf901d60db5c44ab55a024d7b16222da662d5eefee0e1ab3a8d0cde854f7fd368b21e3e810a51042163f18bc965abb232886cef094a62b893968b9d45_2", "is_ignored": false, "lines": "with open('/tmp/ca.cert', 'wb') as out:", "message": "Detected hardcoded temp directory. Consider using 'tempfile.TemporaryFile' instead.", "metadata": {"category": "best-practice", "references": ["https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryFile"], "technology": ["python"]}, "metavars": {}, "severity": "WARNING"}, "path": "/root/scanner/vulpy/utils/ca-create.py", "start": {"col": 6, "line": 58, "offset": 1922}}, {"check_id": "root.scanner.scanner_code.scanner_rules.lang.best-practice.hardcoded-tmp-path", "end": {"col": 33, "line": 12, "offset": 368}, "extra": {"engine_kind": "OSS", "fingerprint": "5d6557b74081305cdc0b22c980a90e31c934d1a88f427a66a792fc319e7512f885d6bace7f2300399490f81e2d3f35a4815b9075bec178125ead266199c794d0_0", "is_ignored": false, "lines": "with open(\"/tmp/acme.key\", \"rb\") as key_file:", "message": "Detected hardcoded temp directory. Consider using 'tempfile.TemporaryFile' instead.", "metadata": {"category": "best-practice", "references": ["https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryFile"], "technology": ["python"]}, "metavars": {}, "severity": "WARNING"}, "path": "/root/scanner/vulpy/utils/ca-csr-create.py", "start": {"col": 6, "line": 12, "offset": 341}}, {"check_id": "root.scanner.scanner_code.scanner_rules.lang.best-practice.hardcoded-tmp-path", "end": {"col": 33, "line": 35, "offset": 1142}, "extra": {"engine_kind": "OSS", "fingerprint": "5d6557b74081305cdc0b22c980a90e31c934d1a88f427a66a792fc319e7512f885d6bace7f2300399490f81e2d3f35a4815b9075bec178125ead266199c794d0_1", "is_ignored": false, "lines": "with open(\"/tmp/acme.csr\", \"wb\") as out:", "message": "Detected hardcoded temp directory. Consider using 'tempfile.TemporaryFile' instead.", "metadata": {"category": "best-practice", "references": ["https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryFile"], "technology": ["python"]}, "metavars": {}, "severity": "WARNING"}, "path": "/root/scanner/vulpy/utils/ca-csr-create.py", "start": {"col": 6, "line": 35, "offset": 1115}}, {"check_id": "root.scanner.scanner_code.scanner_rules.lang.best-practice.hardcoded-tmp-path", "end": {"col": 32, "line": 13, "offset": 368}, "extra": {"engine_kind": "OSS", "fingerprint": "4b2736f5435848434ef245ae8bdbd2b404f807b4b0b04676603c94572ef2211c03d665f8dc3cbaa61c1cf7c8d92190017a2e7286efe48f52677c8b990364d97f_0", "is_ignored": false, "lines": "with open(\"/tmp/ca.cert\", \"rb\") as ca_cert_file:", "message": "Detected hardcoded temp directory. Consider using 'tempfile.TemporaryFile' instead.", "metadata": {"category": "best-practice", "references": ["https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryFile"], "technology": ["python"]}, "metavars": {}, "severity": "WARNING"}, "path": "/root/scanner/vulpy/utils/ca-csr-load.py", "start": {"col": 6, "line": 13, "offset": 342}}, {"check_id": "root.scanner.scanner_code.scanner_rules.lang.best-practice.hardcoded-tmp-path", "end": {"col": 33, "line": 16, "offset": 504}, "extra": {"engine_kind": "OSS", "fingerprint": "4b2736f5435848434ef245ae8bdbd2b404f807b4b0b04676603c94572ef2211c03d665f8dc3cbaa61c1cf7c8d92190017a2e7286efe48f52677c8b990364d97f_1", "is_ignored": false, "lines": "with open(\"/tmp/acme.csr\", \"rb\") as csr_file:", "message": "Detected hardcoded temp directory. Consider using 'tempfile.TemporaryFile' instead.", "metadata": {"category": "best-practice", "references": ["https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryFile"], "technology": ["python"]}, "metavars": {}, "severity": "WARNING"}, "path": "/root/scanner/vulpy/utils/ca-csr-load.py", "start": {"col": 6, "line": 16, "offset": 477}}, {"check_id": "root.scanner.scanner_code.scanner_rules.lang.best-practice.hardcoded-tmp-path", "end": {"col": 31, "line": 19, "offset": 618}, "extra": {"engine_kind": "OSS", "fingerprint": "4b2736f5435848434ef245ae8bdbd2b404f807b4b0b04676603c94572ef2211c03d665f8dc3cbaa61c1cf7c8d92190017a2e7286efe48f52677c8b990364d97f_2", "is_ignored": false, "lines": "with open(\"/tmp/ca.key\", \"rb\") as key_file:", "message": "Detected hardcoded temp directory. Consider using 'tempfile.TemporaryFile' instead.", "metadata": {"category": "best-practice", "references": ["https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryFile"], "technology": ["python"]}, "metavars": {}, "severity": "WARNING"}, "path": "/root/scanner/vulpy/utils/ca-csr-load.py", "start": {"col": 6, "line": 19, "offset": 593}}, {"check_id": "root.scanner.scanner_code.scanner_rules.lang.best-practice.hardcoded-tmp-path", "end": {"col": 34, "line": 35, "offset": 1251}, "extra": {"engine_kind": "OSS", "fingerprint": "4b2736f5435848434ef245ae8bdbd2b404f807b4b0b04676603c94572ef2211c03d665f8dc3cbaa61c1cf7c8d92190017a2e7286efe48f52677c8b990364d97f_3", "is_ignored": false, "lines": "with open('/tmp/acme.cert', 'wb') as out:", "message": "Detected hardcoded temp directory. Consider using 'tempfile.TemporaryFile' instead.", "metadata": {"category": "best-practice", "references": ["https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryFile"], "technology": ["python"]}, "metavars": {}, "severity": "WARNING"}, "path": "/root/scanner/vulpy/utils/ca-csr-load.py", "start": {"col": 6, "line": 35, "offset": 1223}}, {"check_id": "root.scanner.scanner_code.scanner_rules.lang.best-practice.hardcoded-tmp-path", "end": {"col": 33, "line": 14, "offset": 373}, "extra": {"engine_kind": "OSS", "fingerprint": "4705d3565f24a9bdbcfc7cf3b2b6276a9482f7bf56fb82eea93ae5934288d7b328aadad387558fd2a55c6f2c616321da3a90b12f5608d5a3f18df549751bfc0a_0", "is_ignored": false, "lines": "with open(\"/tmp/acme.key\", \"rb\") as key_file:", "message": "Detected hardcoded temp directory. Consider using 'tempfile.TemporaryFile' instead.", "metadata": {"category": "best-practice", "references": ["https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryFile"], "technology": ["python"]}, "metavars": {}, "severity": "WARNING"}, "path": "/root/scanner/vulpy/utils/rsa-decrypt.py", "start": {"col": 6, "line": 14, "offset": 346}}, {"check_id": "root.scanner.scanner_code.scanner_rules.lang.best-practice.hardcoded-tmp-path", "end": {"col": 33, "line": 14, "offset": 353}, "extra": {"engine_kind": "OSS", "fingerprint": "bcb4f51771f49e34a6f3748ddc7b03cf88cb1081766756f4285bfaa837e7cd21b63b7f4f28c9f8c1ec09ab4a7757526d610519a33c194f180e8b050e1df43c56_0", "is_ignored": false, "lines": "with open(\"/tmp/acme.pub\", \"rb\") as key_file:", "message": "Detected hardcoded temp directory. Consider using 'tempfile.TemporaryFile' instead.", "metadata": {"category": "best-practice", "references": ["https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryFile"], "technology": ["python"]}, "metavars": {}, "severity": "WARNING"}, "path": "/root/scanner/vulpy/utils/rsa-encrypt.py", "start": {"col": 6, "line": 14, "offset": 326}}, {"check_id": "root.scanner.scanner_code.scanner_rules.lang.best-practice.hardcoded-tmp-path", "end": {"col": 33, "line": 26, "offset": 726}, "extra": {"engine_kind": "OSS", "fingerprint": "1d7e129137a2f0657da9df50311275c58a5b9c28274e7c05a07080bba5d20a2bade517cd18c28e4aa7ee6467cdddb992bb3b514d288e2b5411f8c13e5dfeeaba_0", "is_ignored": false, "lines": "with open('/tmp/acme.key', 'wb') as out:", "message": "Detected hardcoded temp directory. Consider using 'tempfile.TemporaryFile' instead.", "metadata": {"category": "best-practice", "references": ["https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryFile"], "technology": ["python"]}, "metavars": {}, "severity": "WARNING"}, "path": "/root/scanner/vulpy/utils/rsa-keygen.py", "start": {"col": 6, "line": 26, "offset": 699}}, {"check_id": "root.scanner.scanner_code.scanner_rules.lang.best-practice.hardcoded-tmp-path", "end": {"col": 33, "line": 29, "offset": 795}, "extra": {"engine_kind": "OSS", "fingerprint": "1d7e129137a2f0657da9df50311275c58a5b9c28274e7c05a07080bba5d20a2bade517cd18c28e4aa7ee6467cdddb992bb3b514d288e2b5411f8c13e5dfeeaba_1", "is_ignored": false, "lines": "with open('/tmp/acme.pub', 'wb') as out:", "message": "Detected hardcoded temp directory. Consider using 'tempfile.TemporaryFile' instead.", "metadata": {"category": "best-practice", "references": ["https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryFile"], "technology": ["python"]}, "metavars": {}, "severity": "WARNING"}, "path": "/root/scanner/vulpy/utils/rsa-keygen.py", "start": {"col": 6, "line": 29, "offset": 768}}, {"check_id": "root.scanner.scanner_code.scanner_rules.lang.best-practice.hardcoded-tmp-path", "end": {"col": 33, "line": 15, "offset": 413}, "extra": {"engine_kind": "OSS", "fingerprint": "c6a860369d557a447e7ad3a6673818a725ae446379a2f0747af152d8958a97254a20c253578dfb52da0d4c97a770bc92df03f1a5f4643588ceb95ced065ef5b0_0", "is_ignored": false, "lines": "with open(\"/tmp/acme.key\", \"rb\") as key_file:", "message": "Detected hardcoded temp directory. Consider using 'tempfile.TemporaryFile' instead.", "metadata": {"category": "best-practice", "references": ["https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryFile"], "technology": ["python"]}, "metavars": {}, "severity": "WARNING"}, "path": "/root/scanner/vulpy/utils/rsa-sign.py", "start": {"col": 6, "line": 15, "offset": 386}}, {"check_id": "root.scanner.scanner_code.scanner_rules.lang.best-practice.hardcoded-tmp-path", "end": {"col": 33, "line": 16, "offset": 443}, "extra": {"engine_kind": "OSS", "fingerprint": "bc795728f36a1934e0c18a20f1eb9a3f81cdae2420284965017bfa3a4d5af2b4cc24386a1dccea4d7219f94e92cf33cab7b81434f845c87c15268f71cc3031bd_0", "is_ignored": false, "lines": "with open(\"/tmp/acme.pub\", \"rb\") as key_file:", "message": "Detected hardcoded temp directory. Consider using 'tempfile.TemporaryFile' instead.", "metadata": {"category": "best-practice", "references": ["https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryFile"], "technology": ["python"]}, "metavars": {}, "severity": "WARNING"}, "path": "/root/scanner/vulpy/utils/rsa-verify.py", "start": {"col": 6, "line": 16, "offset": 416}}, {"check_id": "root.scanner.scanner_code.scanner_rules.sqlalchemy.security.sqlalchemy-execute-raw-query", "end": {"col": 103, "line": 19, "offset": 549}, "extra": {"engine_kind": "OSS", "fingerprint": "97d2be605dfd715eaaf5cf6f96ee4d12b23349e5971fd1c2288ec882c1787bf51602f7e481ff684fb92649c30c9d69663442a73fb47a1bc0afcd2f1f1835a2ae_0", "is_ignored": false, "lines": "        c.execute(\"INSERT INTO users (user, password, failures) VALUES ('%s', '%s', '%d')\" %(u, p, 0))", "message": "Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql", "https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm", "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"], "subcategory": ["audit"], "technology": ["sqlalchemy"]}, "metavars": {"$CONNECTION": {"abstract_content": "c", "end": {"col": 10, "line": 19, "offset": 456}, "start": {"col": 9, "line": 19, "offset": 455}}, "$SQL": {"abstract_content": "\"INSERT INTO users (user, password, failures) VALUES ('%s', '%s', '%d')\"", "end": {"col": 91, "line": 19, "offset": 537}, "start": {"col": 19, "line": 19, "offset": 465}}}, "severity": "ERROR"}, "path": "/root/scanner/vulpy/bad/db.py", "start": {"col": 9, "line": 19, "offset": 455}}, {"check_id": "root.scanner.scanner_code.scanner_rules.sqlalchemy.security.sqlalchemy-execute-raw-query", "end": {"col": 151, "line": 20, "offset": 545}, "extra": {"engine_kind": "OSS", "fingerprint": "df0dd2b5d6d0a14c5cee9a8e9c748511d8c75455ec10180089e0b67b934f0d1e6a7287cdffcd6e0bef5f7fde0dd094020f70f1b04f123cf79bef52b5d4cbc1fe_0", "is_ignored": false, "lines": "        c.execute(\"INSERT INTO users (username, password, failures, mfa_enabled, mfa_secret) VALUES ('%s', '%s', '%d', '%d', '%s')\" %(u, p, 0, 0, ''))", "message": "Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql", "https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm", "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"], "subcategory": ["audit"], "technology": ["sqlalchemy"]}, "metavars": {"$CONNECTION": {"abstract_content": "c", "end": {"col": 10, "line": 20, "offset": 404}, "start": {"col": 9, "line": 20, "offset": 403}}, "$SQL": {"abstract_content": "\"INSERT INTO users (username, password, failures, mfa_enabled, mfa_secret) VALUES ('%s', '%s', '%d', '%d', '%s')\"", "end": {"col": 132, "line": 20, "offset": 526}, "start": {"col": 19, "line": 20, "offset": 413}}}, "severity": "ERROR"}, "path": "/root/scanner/vulpy/bad/db_init.py", "start": {"col": 9, "line": 20, "offset": 403}}, {"check_id": "root.scanner.scanner_code.scanner_rules.sqlalchemy.security.sqlalchemy-execute-raw-query", "end": {"col": 113, "line": 12, "offset": 315}, "extra": {"engine_kind": "OSS", "fingerprint": "87acfb6cfa265a1a20f245160880fb5ccca0ec85a1fcc9a77e1c3f803f1c6362cfe47d3481768d2d8c807d1805b2b92837a87e04a3fed86317d220e0a122bb59_0", "is_ignored": false, "lines": "    user = c.execute(\"SELECT * FROM users WHERE username = '{}' and password = '{}'\".format(username, password)).fetchone()", "message": "Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql", "https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm", "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"], "subcategory": ["audit"], "technology": ["sqlalchemy"]}, "metavars": {"$CONNECTION": {"abstract_content": "c", "end": {"col": 13, "line": 12, "offset": 215}, "propagated_value": {"svalue_abstract_content": "conn.cursor()", "svalue_end": {"col": 22, "line": 10, "offset": 201}, "svalue_start": {"col": 9, "line": 10, "offset": 188}}, "start": {"col": 12, "line": 12, "offset": 214}}, "$SQL": {"abstract_content": "\"SELECT * FROM users WHERE username = '{}' and password = '{}'\"", "end": {"col": 85, "line": 12, "offset": 287}, "start": {"col": 22, "line": 12, "offset": 224}}}, "severity": "ERROR"}, "path": "/root/scanner/vulpy/bad/libuser.py", "start": {"col": 12, "line": 12, "offset": 214}}, {"check_id": "root.scanner.scanner_code.scanner_rules.sqlalchemy.security.sqlalchemy-execute-raw-query", "end": {"col": 161, "line": 25, "offset": 668}, "extra": {"engine_kind": "OSS", "fingerprint": "94e2f5d26d3101593137d2c973cc2cf8bf12d5573f692be3ccf4012efc03411587892d7fa82569ed73e870f8c028632ad1186a6f69a54a89a1bb9f44480533ce_0", "is_ignored": false, "lines": "    c.execute(\"INSERT INTO users (username, password, failures, mfa_enabled, mfa_secret) VALUES ('%s', '%s', '%d', '%d', '%s')\" %(username, password, 0, 0, ''))", "message": "Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql", "https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm", "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"], "subcategory": ["audit"], "technology": ["sqlalchemy"]}, "metavars": {"$CONNECTION": {"abstract_content": "c", "end": {"col": 6, "line": 25, "offset": 513}, "propagated_value": {"svalue_abstract_content": "conn.cursor()", "svalue_end": {"col": 22, "line": 23, "offset": 506}, "svalue_start": {"col": 9, "line": 23, "offset": 493}}, "start": {"col": 5, "line": 25, "offset": 512}}, "$SQL": {"abstract_content": "\"INSERT INTO users (username, password, failures, mfa_enabled, mfa_secret) VALUES ('%s', '%s', '%d', '%d', '%s')\"", "end": {"col": 128, "line": 25, "offset": 635}, "start": {"col": 15, "line": 25, "offset": 522}}}, "severity": "ERROR"}, "path": "/root/scanner/vulpy/bad/libuser.py", "start": {"col": 5, "line": 25, "offset": 512}}, {"check_id": "root.scanner.scanner_code.scanner_rules.sqlalchemy.security.sqlalchemy-execute-raw-query", "end": {"col": 99, "line": 53, "offset": 1301}, "extra": {"engine_kind": "OSS", "fingerprint": "5a34e2fd0462a79d82203872e55ab01f7b09aec23b8ca26117cadb68a552303fbe6f88a5b9ff63b3df91a98c5301379a356cdd5b42c293b96596044600266b3a_0", "is_ignored": false, "lines": "    c.execute(\"UPDATE users SET password = '{}' WHERE username = '{}'\".format(password, username))", "message": "Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql", "https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm", "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"], "subcategory": ["audit"], "technology": ["sqlalchemy"]}, "metavars": {"$CONNECTION": {"abstract_content": "c", "end": {"col": 6, "line": 53, "offset": 1208}, "propagated_value": {"svalue_abstract_content": "conn.cursor()", "svalue_end": {"col": 22, "line": 51, "offset": 1201}, "svalue_start": {"col": 9, "line": 51, "offset": 1188}}, "start": {"col": 5, "line": 53, "offset": 1207}}, "$SQL": {"abstract_content": "\"UPDATE users SET password = '{}' WHERE username = '{}'\"", "end": {"col": 71, "line": 53, "offset": 1273}, "start": {"col": 15, "line": 53, "offset": 1217}}}, "severity": "ERROR"}, "path": "/root/scanner/vulpy/bad/libuser.py", "start": {"col": 5, "line": 53, "offset": 1207}}, {"check_id": "root.scanner.scanner_code.scanner_rules.sqlalchemy.security.sqlalchemy-execute-raw-query", "end": {"col": 171, "line": 61, "offset": 1523}, "extra": {"engine_kind": "OSS", "fingerprint": "39727df7b71a324358e2052e6cdc1350f92b5fa3a3171fa1b0c1db1a07ea6da9f85ec981cb610cd2e958c3b8ac9ba0667d24168c96896091936280cdf03d2d8c_0", "is_ignored": false, "lines": "    c.execute(\"INSERT INTO users (username, password, salt, failures, mfa_enabled, mfa_secret) VALUES ('%s', '%s', '%s', '%d', '%d', '%s')\" %(username, '', '', 0, 0, ''))", "message": "Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy provides TextualSQL to easily used prepared statement with named parameters. For complex SQL composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy ORM will be a better option.", "metadata": {"category": "security", "confidence": "LOW", "cwe": ["CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')"], "cwe2021-top25": true, "cwe2022-top25": true, "impact": "HIGH", "likelihood": "LOW", "owasp": ["A01:2017 - Injection", "A03:2021 - Injection"], "references": ["https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql", "https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm", "https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column"], "subcategory": ["audit"], "technology": ["sqlalchemy"]}, "metavars": {"$CONNECTION": {"abstract_content": "c", "end": {"col": 6, "line": 61, "offset": 1358}, "propagated_value": {"svalue_abstract_content": "conn.cursor()", "svalue_end": {"col": 22, "line": 60, "offset": 1352}, "svalue_start": {"col": 9, "line": 60, "offset": 1339}}, "start": {"col": 5, "line": 61, "offset": 1357}}, "$SQL": {"abstract_content": "\"INSERT INTO users (username, password, salt, failures, mfa_enabled, mfa_secret) VALUES ('%s', '%s', '%s', '%d', '%d', '%s')\"", "end": {"col": 140, "line": 61, "offset": 1492}, "start": {"col": 15, "line": 61, "offset": 1367}}}, "severity": "ERROR"}, "path": "/root/scanner/vulpy/good/libuser.py", "start": {"col": 5, "line": 61, "offset": 1357}}, {"check_id": "root.scanner.scanner_code.scanner_rules.cryptography.security.crypto-mode-without-authentication", "end": {"col": 101, "line": 24, "offset": 630}, "extra": {"engine_kind": "OSS", "fingerprint": "13201d23cdac7dc461fb3017d554db2b6a6a47f87c4ca6741b6914896b6e8233d937e826d4c5eb77f827b721c24f9727f7169574883fe94d4c83d1bbec68fa6f_0", "is_ignored": false, "lines": "    cipher = Cipher(algorithms.AES(key_digest), modes.CFB(unhexlify(iv)), backend=default_backend())", "message": "An encryption mode of operation is being used without proper message authentication. This can potentially result in the encrypted content to be decrypted by an attacker. Consider instead use an AEAD mode of operation like GCM. ", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "impact": "MEDIUM", "likelihood": "LOW", "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["audit"], "technology": ["cryptography"]}, "metavars": {"$HAZMAT_MODE": {"abstract_content": "modes.CFB", "end": {"col": 58, "line": 24, "offset": 587}, "start": {"col": 49, "line": 24, "offset": 578}}}, "severity": "ERROR"}, "path": "/root/scanner/vulpy/utils/aes-decrypt.py", "start": {"col": 14, "line": 24, "offset": 543}}, {"check_id": "root.scanner.scanner_code.scanner_rules.cryptography.security.crypto-mode-without-authentication", "end": {"col": 90, "line": 28, "offset": 692}, "extra": {"engine_kind": "OSS", "fingerprint": "1a0e2894558404b4850965eb6cd118353307d1a70e6355e5cf0fa4cbb9d45965de3247c886e497a41a26299dcd71718ae7a336b90f58247b0d5c3ebe987c7343_0", "is_ignored": false, "lines": "    cipher = Cipher(algorithms.AES(key_digest), modes.CFB(iv), backend=default_backend())", "message": "An encryption mode of operation is being used without proper message authentication. This can potentially result in the encrypted content to be decrypted by an attacker. Consider instead use an AEAD mode of operation like GCM. ", "metadata": {"category": "security", "confidence": "MEDIUM", "cwe": ["CWE-327: Use of a Broken or Risky Cryptographic Algorithm"], "impact": "MEDIUM", "likelihood": "LOW", "owasp": ["A03:2017 - Sensitive Data Exposure", "A02:2021 - Cryptographic Failures"], "references": ["https://owasp.org/Top10/A02_2021-Cryptographic_Failures"], "subcategory": ["audit"], "technology": ["cryptography"]}, "metavars": {"$HAZMAT_MODE": {"abstract_content": "modes.CFB", "end": {"col": 58, "line": 28, "offset": 660}, "start": {"col": 49, "line": 28, "offset": 651}}}, "severity": "ERROR"}, "path": "/root/scanner/vulpy/utils/aes-encrypt.py", "start": {"col": 14, "line": 28, "offset": 616}}, {"check_id": "root.scanner.scanner_code.scanner_rules.requests.best-practice.use-raise-for-status", "end": {"col": 110, "line": 30, "offset": 904}, "extra": {"engine_kind": "OSS", "fingerprint": "82be88671dba3b5e051666a2b70fad7c762ba0822e219a7a969f0e2fbf603bb70542cd72457dd342fa8bea0d9fa8920b8c4218f2043f3d2573eac31b04e66e35_0", "is_ignored": false, "lines": "    r = requests.post('http://127.0.1.1:5000/api/post', json={'text':message}, headers={'X-APIKEY': api_key})", "message": "There's an HTTP request made with requests, but the raise_for_status() utility method isn't used. This can result in request errors going unnoticed and your code behaving in unexpected ways, such as if your authorization API returns a 500 error while you're only checking for a 401.", "metadata": {"category": "best-practice", "references": ["https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status"], "technology": ["requests"]}, "metavars": {}, "severity": "WARNING"}, "path": "/root/scanner/vulpy/bad/api_post.py", "start": {"col": 9, "line": 30, "offset": 803}}, {"check_id": "root.scanner.scanner_code.scanner_rules.requests.best-practice.use-raise-for-status", "end": {"col": 87, "line": 22, "offset": 352}, "extra": {"engine_kind": "OSS", "fingerprint": "f1a571ce6585a208d7f1ed7313b4d3b49323d77038e736b74e6516bab9a95ddbdf5bd75b8c68f2fd4c1b72336b9e935f37c2a489e4431c2fa386ac7bc6895f76_0", "is_ignored": false, "lines": "    response = requests.post(URL, data = {'username': username, 'password': password})", "message": "There's an HTTP request made with requests, but the raise_for_status() utility method isn't used. This can result in request errors going unnoticed and your code behaving in unexpected ways, such as if your authorization API returns a 500 error while you're only checking for a 401.", "metadata": {"category": "best-practice", "references": ["https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status"], "technology": ["requests"]}, "metavars": {}, "severity": "WARNING"}, "path": "/root/scanner/vulpy/good/httpbrute.py", "start": {"col": 16, "line": 22, "offset": 281}}, {"check_id": "root.scanner.scanner_code.scanner_rules.requests.best-practice.use-raise-for-status", "end": {"col": 40, "line": 21, "offset": 776}, "extra": {"engine_kind": "OSS", "fingerprint": "1ad6e7e6f7b3d938936418d571fe7044832924ae045278f0afc8bff75a66b5e578595aa27f88cb1db7d3d12d04476305375fea308d481510d3390433bfd004b0_0", "is_ignored": false, "lines": "    with requests.get(url, stream=True) as r:", "message": "There's an HTTP request made with requests, but the raise_for_status() utility method isn't used. This can result in request errors going unnoticed and your code behaving in unexpected ways, such as if your authorization API returns a 500 error while you're only checking for a 401.", "metadata": {"category": "best-practice", "references": ["https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status"], "technology": ["requests"]}, "metavars": {}, "severity": "WARNING"}, "path": "/root/scanner/vulpy/utils/generate_bad_passwords.py", "start": {"col": 10, "line": 21, "offset": 746}}, {"check_id": "root.scanner.scanner_code.scanner_rules.requests.best-practice.use-raise-for-status", "end": {"col": 91, "line": 25, "offset": 700}, "extra": {"engine_kind": "OSS", "fingerprint": "a5aa83fae95661c9cc449d356f80e5f59e80839615b9310accb6e42437404aa2c32c91471a241756a876286db554309015ee335f65ab5155ebf823bc1950b87d_0", "is_ignored": false, "lines": "        response = requests.post(url, data = {'username': username, 'password': password})", "message": "There's an HTTP request made with requests, but the raise_for_status() utility method isn't used. This can result in request errors going unnoticed and your code behaving in unexpected ways, such as if your authorization API returns a 500 error while you're only checking for a 401.", "metadata": {"category": "best-practice", "references": ["https://requests.readthedocs.io/en/master/api/#requests.Response.raise_for_status"], "technology": ["requests"]}, "metavars": {}, "severity": "WARNING"}, "path": "/root/scanner/vulpy/utils/httpbrute.py", "start": {"col": 20, "line": 25, "offset": 629}}, {"check_id": "root.scanner.scanner_code.scanner_rules.requests.best-practice.use-timeout", "end": {"col": 75, "line": 10, "offset": 206}, "extra": {"engine_kind": "OSS", "fingerprint": "47799a515f462cfa5b09aecef371bd14c4fd9fc8c5bae1ee4fe5932ad67f63ee8e44689d93a7b0b76e3e032b6067c10aa616da5aa65acb2b8fed3b0b2ab1ce4d_0", "fix_regex": {"regex": "(.*)\\)$", "replacement": "\\1, timeout=30)"}, "is_ignored": false, "lines": "    r = requests.get('http://127.0.1.1:5000/api/post/{}'.format(username))", "message": "Detected a 'requests' call without a timeout set. By default, 'requests' calls wait until the connection is closed. This means a 'requests' call without a timeout will hang the program if a response is never received. Consider setting a timeout for all 'requests'.", "metadata": {"category": "best-practice", "references": ["https://docs.python-requests.org/en/latest/user/advanced/?highlight=timeout#timeouts", "https://requests.readthedocs.io/en/latest/user/quickstart/#timeouts"], "technology": ["requests"]}, "metavars": {}, "severity": "WARNING"}, "path": "/root/scanner/vulpy/bad/api_list.py", "start": {"col": 9, "line": 10, "offset": 140}}, {"check_id": "root.scanner.scanner_code.scanner_rules.requests.best-practice.use-timeout", "end": {"col": 108, "line": 16, "offset": 422}, "extra": {"engine_kind": "OSS", "fingerprint": "cf22d63aac7d5e60c9e344b1db166ed3a92874be10936ccb4d43fcfb39835f70f085af80b107246b88673caf110e87f7e72c9d6bba1648e4e1b71e7f095cdc60_0", "fix_regex": {"regex": "(.*)\\)$", "replacement": "\\1, timeout=30)"}, "is_ignored": false, "lines": "        r = requests.post('http://127.0.1.1:5000/api/key', json={'username':username, 'password':password})", "message": "Detected a 'requests' call without a timeout set. By default, 'requests' calls wait until the connection is closed. This means a 'requests' call without a timeout will hang the program if a response is never received. Consider setting a timeout for all 'requests'.", "metadata": {"category": "best-practice", "references": ["https://docs.python-requests.org/en/latest/user/advanced/?highlight=timeout#timeouts", "https://requests.readthedocs.io/en/latest/user/quickstart/#timeouts"], "technology": ["requests"]}, "metavars": {}, "severity": "WARNING"}, "path": "/root/scanner/vulpy/bad/api_post.py", "start": {"col": 13, "line": 16, "offset": 327}}, {"check_id": "root.scanner.scanner_code.scanner_rules.requests.best-practice.use-timeout", "end": {"col": 110, "line": 30, "offset": 904}, "extra": {"engine_kind": "OSS", "fingerprint": "cf22d63aac7d5e60c9e344b1db166ed3a92874be10936ccb4d43fcfb39835f70f085af80b107246b88673caf110e87f7e72c9d6bba1648e4e1b71e7f095cdc60_1", "fix_regex": {"regex": "(.*)\\)$", "replacement": "\\1, timeout=30)"}, "is_ignored": false, "lines": "    r = requests.post('http://127.0.1.1:5000/api/post', json={'text':message}, headers={'X-APIKEY': api_key})", "message": "Detected a 'requests' call without a timeout set. By default, 'requests' calls wait until the connection is closed. This means a 'requests' call without a timeout will hang the program if a response is never received. Consider setting a timeout for all 'requests'.", "metadata": {"category": "best-practice", "references": ["https://docs.python-requests.org/en/latest/user/advanced/?highlight=timeout#timeouts", "https://requests.readthedocs.io/en/latest/user/quickstart/#timeouts"], "technology": ["requests"]}, "metavars": {}, "severity": "WARNING"}, "path": "/root/scanner/vulpy/bad/api_post.py", "start": {"col": 9, "line": 30, "offset": 803}}, {"check_id": "root.scanner.scanner_code.scanner_rules.requests.best-practice.use-timeout", "end": {"col": 87, "line": 22, "offset": 352}, "extra": {"engine_kind": "OSS", "fingerprint": "027cafec15adb14818cb98d363434ab42ef7279f7df25a81bf412e19ab90ac1e2903efcbe22d227da1b0407f1ab1af4c619a90bdad62b588b6b76a0520f334b3_0", "fix_regex": {"regex": "(.*)\\)$", "replacement": "\\1, timeout=30)"}, "is_ignored": false, "lines": "    response = requests.post(URL, data = {'username': username, 'password': password})", "message": "Detected a 'requests' call without a timeout set. By default, 'requests' calls wait until the connection is closed. This means a 'requests' call without a timeout will hang the program if a response is never received. Consider setting a timeout for all 'requests'.", "metadata": {"category": "best-practice", "references": ["https://docs.python-requests.org/en/latest/user/advanced/?highlight=timeout#timeouts", "https://requests.readthedocs.io/en/latest/user/quickstart/#timeouts"], "technology": ["requests"]}, "metavars": {}, "severity": "WARNING"}, "path": "/root/scanner/vulpy/good/httpbrute.py", "start": {"col": 16, "line": 22, "offset": 281}}, {"check_id": "root.scanner.scanner_code.scanner_rules.requests.best-practice.use-timeout", "end": {"col": 40, "line": 21, "offset": 776}, "extra": {"engine_kind": "OSS", "fingerprint": "a951497a7dca3b09eb2f42b0550b2163a284f1e44c83cc1cff93387d74fed483a280f849baa0977e31f9c7373cfa277ce5c00ed60d7fe15c56061f9b4251daaf_0", "fix_regex": {"regex": "(.*)\\)$", "replacement": "\\1, timeout=30)"}, "is_ignored": false, "lines": "    with requests.get(url, stream=True) as r:", "message": "Detected a 'requests' call without a timeout set. By default, 'requests' calls wait until the connection is closed. This means a 'requests' call without a timeout will hang the program if a response is never received. Consider setting a timeout for all 'requests'.", "metadata": {"category": "best-practice", "references": ["https://docs.python-requests.org/en/latest/user/advanced/?highlight=timeout#timeouts", "https://requests.readthedocs.io/en/latest/user/quickstart/#timeouts"], "technology": ["requests"]}, "metavars": {}, "severity": "WARNING"}, "path": "/root/scanner/vulpy/utils/generate_bad_passwords.py", "start": {"col": 10, "line": 21, "offset": 746}}, {"check_id": "root.scanner.scanner_code.scanner_rules.requests.best-practice.use-timeout", "end": {"col": 91, "line": 25, "offset": 700}, "extra": {"engine_kind": "OSS", "fingerprint": "0c7994f9971471a375eee258a44b1ecbc0518fc4f7ed6f0783e0c1ff2921e20a8fbf63e737330c56892f64a3a67302b8ca0c282b372fe09b0c9c1d9a84eb0bc0_0", "fix_regex": {"regex": "(.*)\\)$", "replacement": "\\1, timeout=30)"}, "is_ignored": false, "lines": "        response = requests.post(url, data = {'username': username, 'password': password})", "message": "Detected a 'requests' call without a timeout set. By default, 'requests' calls wait until the connection is closed. This means a 'requests' call without a timeout will hang the program if a response is never received. Consider setting a timeout for all 'requests'.", "metadata": {"category": "best-practice", "references": ["https://docs.python-requests.org/en/latest/user/advanced/?highlight=timeout#timeouts", "https://requests.readthedocs.io/en/latest/user/quickstart/#timeouts"], "technology": ["requests"]}, "metavars": {}, "severity": "WARNING"}, "path": "/root/scanner/vulpy/utils/httpbrute.py", "start": {"col": 20, "line": 25, "offset": 629}}], "version": "1.34.1"}
